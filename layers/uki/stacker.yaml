config:
  prerequisites:
    - ../build-krd/stacker.yaml
    - ../kernel/stacker.yaml
    - ../mos/stacker.yaml
    - ../stubby/stacker.yaml

uki-build:
  build_only: true
  from:
    type: built
    tag: build-krd
  import:
    - stacker://kernel-build/export/boot.tar
    - stacker://kernel-build/export/initrd.tar
    - stacker://mos-build/export/mos.tar
    - stacker://stubby-build/export/stubby.tar
    - path: ${{KEYSET_D}}/
      dest: /import/keys/

  run: |
    #!/bin/bash -ex
    d=$(mktemp -d)
    cd "$d"
    trap "rm -Rf $d" EXIT

    keydir=$(echo /import/keys/*)
    [ -d "$keydir" ]

    mkdir $d/export

    initrd_d="$d/initrd"
    tar -C "$d" -xf /stacker/initrd.tar
    [ -d "$initrd_d" ] || { echo "initrd.tar did not create 'initrd'"; exit 1; }

    # mos is expected to create initrd/mos.cpio.gz
    tar -C "$d" -xf /stacker/mos.tar
    [ -f "$initrd_d/mos.cpio.gz" ] ||
        { echo "mos.tar did not produce mos.cpio.gz"; exit 1; }

    tar -C "$d" -xf /stacker/boot.tar
    # boot should produce boot/<uname -r>/
    kernel_d=$(echo "$d/boot"/*)
    [ -d "$kernel_d" -a -f "$kernel_d/vmlinuz" ] ||
       { echo "kernel didn't have expected content"; exit 1; }
    kernel="$kernel_d/vmlinuz"

    stubefi="$d/stubby/stubby.efi"
    tar -C "$d" -xf /stacker/stubby.tar
    [ -f "$stubefi" ] ||
        { echo "stubby.tar did not have a stubby/stubby.efi"; exit 1; }

    keyworkd="$d/keyworkd"
    mkdir -p "$keyworkd/etc"
    cp "$keydir/manifest-ca/cert.pem" "$keyworkd/manifestCA.pem"
    # For some reason, copying the directory doesn't seem to work.
    # The kernel ends up not unpacking it.
    # Also, create-cpio always compresses, but this must not be compressed,
    # so do it by hand.
    (cd "$keydir/pcr7data"; find . | cpio -o -H newc > "$keyworkd/etc/pcr7data.cpio")

    create-cpio "$keyworkd" "$initrd_d/keys.cpio.gz"

    initrd="$d/initrd.cpio.gz"
    # smash initrds together
    ( set +x;
      for f in "${initrd_d}"/*.cpio*; do
        echo "adding $f" 1>&2
        case "$f" in
          *.gz) pigz --decompress --to-stdout "$f" || exit;;
          *) cat "$f" || exit;;
        esac
      done  |
        pigz --to-stdout
    ) > "$initrd"

    # smash and sign.
    # Build in an empty command line.
    smooshtmpd="$tmpd/smoosh"
    mkdir "$smooshtmpd"
    cmdline=""
    cmdlinef="$smooshtmpd/cmdline"
    sbatf="$smooshtmpd/sbat.csv"
    printf "%s" "$cmdline" > "$cmdlinef"
    cat > "$sbatf" <<"EOF"
    sbat,1,SBAT Version,sbat,1,https://github.com/rhboot/shim/blob/main/SBAT.md
    stubby.puzzleos,2,PuzzleOS,stubby,1,https://github.com/puzzleos/stubby
    linux.puzzleos,1,PuzzleOS,linux,1,NOURL
    EOF

    objcopy \
        "--add-section=.cmdline=$cmdlinef" \
        "--change-section-vma=.cmdline=0x30000" \
        "--change-section-vma=.sbat=0x50000" \
        "--add-section=.sbat=$sbatf" \
        "--set-section-alignment=.sbat=512" \
        "--add-section=.linux=$kernel" \
        "--change-section-vma=.linux=0x2000000" \
        "--add-section=.initrd=$initrd" \
        "--change-section-vma=.initrd=0x3000000" \
        "$stubefi" "$d/kernel.efi"

    mkdir "$d/uki"
    cp "$initrd" "$d/uki"
    cp "$kernel" "$d/uki"
    sbsign \
        "--cert=$keydir/uki-production/cert.pem" \
        "--key=$keydir/uki-production/privkey.pem" \
        "--output=$d/uki/kernel.efi" "$d/kernel.efi"
    chmod 644 "$d/uki/kernel.efi"

    mkdir /export
    tar -C "$d" -cf /export/uki.tar uki
