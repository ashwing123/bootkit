config:
  prerequisites:
    - ../minbase/stacker.yaml

virt-firmware-build-env:
  build_only: true
  from:
    type: built
    tag: minbase
  run: |
    pkgtool install python3 python3-pip 
    ARCH=$(uname -m)
    if [ "$ARCH" = "aarch64" ]; then
      pkgtool install qemu-system-arm qemu-efi-aarch64
    else
      pkgtool install ovmf
    fi
    
    pip install virt-firmware

virt-firmware-build:
  build_only: true
  from:
    type: built
    tag: virt-firmware-build-env
  import:
    - path: ${{KEYSET_D}}/
      dest: /import/keys/
  run: |
    d=$(mktemp -d)
    trap "rm -Rf $d" EXIT

    ARCH=$(uname -m)

    mkdir "$d/virt-fw"
    keydir=$(echo /import/keys/*)
    [ -d "$keydir" ]

    getGuidCert() {
      local kd="$1" n="$2" guid="" guidf="" certf=""
      certf="$kd/$n/cert.pem"
      guidf="$kd/$n/guid"
      [ -d "$kd/$n" ] || {
          echo "ERROR: no '$n' dir in $keydir" 1>&2
          return 1
      }
      [ -f "$certf" ] || {
        echo "ERROR: no cert file for '$n' in $certf" 1>&2
        return 1
      }
      [ -f "$guidf" ] || {
        echo "ERROR: no guid file for '$n' in $guidf" 1>&2
        return 1
      }
      # cannot check error here because guid files do not have trailing newline
      # and 'read' will return non-zero.
      local t="" tmpl="xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
      read guid < "$guidf" || :
      t=$(echo "$guid" | tr '0-9a-f' 'x')
      [ "$t" = "$tmpl" ] || {
        echo "ERROR: read '$guid' from $guidf. did not match template '$tmpl' ($t)" 1>&2
        return 1
      }

      echo "$guid" "$certf"
    }

    if [ "$ARCH" = "aarch64" ]; then
      codef=/usr/share/AAVMF/AAVMF_CODE.ms.fd
      varsf=/usr/share/AAVMF/AAVMF_VARS.ms.fd
    else
      codef=/usr/share/OVMF/OVMF_CODE.secboot.fd
      varsf=/usr/share/OVMF/OVMF_VARS.fd
    fi
    
    cp "$codef" "$d/virt-fw/virt-firmware-code.fd"
    cp "$varsf" "$d/virt-fw/virt-firmware-vars-empty.fd"
    set +x
    set -- \
       --set-pk  $(getGuidCert "$keydir" uefi-pk) \
       --add-kek $(getGuidCert "$keydir" uefi-kek) \
       --add-db  $(getGuidCert "$keydir" uefi-db)
    [ $# -eq 9 ] || { echo "getting keys failed $#: $*" 1>&2; exit 1; }

    set -x
    virt-fw-vars \
      "--input=$varsf" \
      "--output=$d/virt-fw/virt-firmware-vars.fd" \
      --secure-boot \
      --no-microsoft \
      "$@"

    mkdir /export
    tar -C "$d" -cvf /export/virt-firmware.tar virt-fw
